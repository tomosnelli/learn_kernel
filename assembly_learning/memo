Hello World break down:

text db "Hello, World", 10

db => define bytes it essentially means that we are going to define some raw bytes of data to insert into our code.
The 10 is a newline character denote as \n

text => This is a name assignemd to the address in memory that this data is located in. Whenever we use "text" later in the code/when the code is compiled, the compiler will determine the actual location in memory of this data and replace all future instances of "text" with that memory address
Also called a label.

Registers:
part of the CPU that temporarily hold memory
x86_64 registers hold 64 bits
register holds integer numbers

System Call:
A system call or a syscall is when a program requests a service from the kernel. System calls will differ by operating system because different operating systems use different kernels
All syscalls have an ID associated with them (number)
Syscalls also take arguments, meaning, a list of inputs

System Call Inputs by Register:
Argument		Register
ID					rax
1					rdi
2					rsi
3					rdx
4					r10
5					r8
6					r9

so if you want to use a syscall you load the ID of a syscall to the rax register, and then pass in other arguments through 1 and 6.
look at image system_call_list.png
green $ means to pass an address to the register, red # means pass value

see system call related png

sys_exit:
ID => 60 (put 60 into rax
rdi => number representing errorcode(if no error 0

sys_write(1, text, 14) // pseudocode
so this means use standard output, memory address of the text and 14 which is the length of the text

Sections:
x86_64 assembly files have three sections, ".data", ".bss" and ".text" section
The data section is where all data is defined before compilation
The bss section is where data(memory space) is allocated for future use.
The text section is where the actual code goes.

Labels:
A label is used to label a part of code.
upon compilation, the compiler will calculate the location in which the label will sit in memory.
Any time the name of the label is used afterwards, that name is replace by the location in memory by the compiler

The "Start" Label:
the "_start" lable is essential for all programs.
when your program is compiled and later executed, it is executed first at the location of "_start"
if the linker cannot find "_start", it will throw an error

Global:
The word "global" is used when you want the linker to be able to know the address of some label.
The object file generated will contain a link to every lable declared "global"
In this case, we have to declare "_start" as global since it is required for the code to be properly linked.


===================================================================================================================

Flags:
Flags, like registers, hold data.
Flags only hold 1 bit each. They are either ture or false
Individual flags are part of a larger register.


Pointers:
pointers are registers that hold data
it keeps an address to memory in it


rip register:
it hold the address for code that should be executed next in the control flow


jumps:
jumps can be used to jump to different parts of code base on labels.
They are used to divert program flow.

the general format of the jump is:
jmp label
	_start:
		jmp _start
this makes and infinite loop
and this will load the address for _start label in to rip(pointer) register
it holds the address for the next instruction


comparisons:
use cmp for comparisons...
syntax should be comp register(name), register(name)/value
	cmp rax, 23
	cmp rax, rbx
After the comparison is done, certain flags will get set
example:
	a == b		ZF = 1  flag(type of register) will be set to 1
	a != b		ZF = 0  flag(type of register) will be set to 0
and.. after a comparison is made, a conditional jump can be made.
conditional jumps are based on the status of the flags
conditional jumps in code are written just like unconditional jumps, however
"jmp" is replaced by the symbol for the conditional jump.

conditional jump Examples
	cmp rax, 23
	je _doThis
je => jump equals. So if the values are equal a jump will happen

or
	cmp rax, rbx
	jg _doThis
jg => jump greater? so if the value of the value in the rax register is greater than the value in the rbx register.

Registers as Pointers
the default registers can be treated as pointers.
to treat a register as a pointer, surround the register name with square brackets => rax ===> [rax]

example
mov rax, rbx ; this will load the value in the rbx register into the rax register

mov rax, [rbx] ; this will load the value the rbx register is pointing to the rax register


Calls and jumps:
calls and jumps are essentially the same.
However, when "call" is used, the original position the call was made can be returned to using "ret".

Example:

section .data
	text db "Hello, World!", 10 ; 10 is a new line character \n
section .text
	global _start
_start:
	call _printHello

	mov rax, 60
	mov rdi, 0
	syscall

Math operations
math operations are used to mathematically manipulate registers.
the form of a math operation is typically:
	operation register, value/register
the first register is the subject of the operation
example:
	add rax, 5 ; value of rax is being incremented
	sub rbx, rax ; rax value will not change, but value of rax will be decremented by rax

math operations list

operation name	 Description
add a, b			a = a + b
sub a, b			a = a - b
mul reg				rax = rax - reg <= it is assumed that the first operand will be rax
div reg				rax = rax / reg
neg reg				reg = -reg
inc reg				reg = reg + 1
dec reg				reg = reg - 1
adc a, b			a = a + b + CF(CF is a flag if I remember correctly
sbb a, b			a = a - b - CF


The Stack:
The stack, like registers, it another way to temporarily store data.
It is called the "stack" because you stack data onto it.
imagine a stack of papers, As you stack one paper on top of another, you can only at a given time see the contents of the paper at the top of the stack.
A page within the midddle of the stack cannot be removed without removing all the pages on top of it first, as the pages on top of it hold it in place.

stack terminology => when you add data onto the top of the stack, you PUSH data onto the stack.
when you remove data from the top of the stack, you POP data from the stack.
if you look at the top of the stack without removing or adding anything to it, this is called peeking.


Stack Operations:

Operation			 Effect
push reg/value		Pushes a vlue onto the stack
pop reg				Pops a value off of the stack and stores it in reg
mov reg, [rsp]		Stores the peek value in reg. rsp is a stack pointer that points to the top of the stack

NOTE: usually in places where you can use registers, you can also use pointers.
	  Such as, instead of "pop reg", you can use "pop [label]" to pop a value off the stack directly into a position in
	  memory.

NOTE: when you do "pop rax" this will pop the value off the stack, then save it to rax register

==========================================================================

Macro:
A macro is a single instruction that expands into a predefined set of instructions to perform a particular task.

example:
	exit => mov rax, 60
		 => mov rdi, 0
		 => syscall
exit, the single instruction will do this

Defining Macros:
	syntax:
	%macro <name> <argc>
		...
		<macro body>
		...
	%endmacro

argc: the number of arguments that the macro will take
to access the macro arguments you use "%1" for the first inpu, "%2"
for the second input and so on inside the macro body

actual example

%macro exit 0      ; 0 is argc, meaning it will not take arguments
	mov rax, 60
	mov rdi, 0
	syscall
%endmacro

more examples:
%macro exit 0
	mov rax, 60
	mov rdi, 0
	syscall
%endmacro

%macro printDigit 1
	mov rax, %1
	call _printRAXDigit
%endmacro

_start:
	printDigit 3
	printDigit 4
	exit

==End of example================================

Arguments for macros
if a macro is set to take more than 1 argument, use a comma between argumentso

example:
%macro printDigitSum 2
	mov rax, %1
	add rax, %2
	call _printRAXDigit
%endmacro

_start:
	printDigitSum 3, 2
	exit

notes for using macros two times
you can get a redefine error

example:

%macro freeze 0
_loop:
	jmp _loop

_start:
	freeze
	freeze
	exit

=== this will be expanded as this below =======

%macro freeze 0
_loop:
	jmp _loop
%endmacro

_start:
_loop:
	jmp _loop
_loop:
	jmp _loop
	exit

================================================

and you will get a redefine error
because you are execute/defining the labels with the exact same name.
making it point to the same place

to avoid this, you can use "%%" before a label name within a macro.
This will make it so that the label is unique every time it is expanded.

example:
=======================================================

(original)
%macro freeze 0
_loop:
	jmp _loop
%endmacro

(with %%)
%macro freeze 0
%%loop:
	jmp %%loop
%endmacro

========================================================

Defining Values with EQU

so just like C constances

example:
========================================================

STDIN equ 0
STDOUT equ 1
STDERR equ 2

SYS_READ equ 0
SYS_WRITE equ 1
SYS_EXIT equ 60

section .data
	text db "Hello, World!",10

section .text
	global _start

_start:
	mov rax, SYS_WRITE
	mov rdi, STDOUT
	mov rsi, text
	mov rdx, 14
	syscall

	mov rax, SYS_EXIT
	mov rdi, 0
	syscall

===================================================

Including External Files:
the code below will work because the "print" and "exit" macro
are pre-defined in the "linux64.inc" file.

example:
======================================================

%include "linux64.inc"

section .data
	text db "Hello, World!",10,0
section .text
	global _start

_start:
	print text
	exit

=======================================================

read more about "linux64.inc"
in => http://pastebin.com/N1ZdmhLw

NOTE: about div operation

===================================

mov rax, 24
mov rbx, 2
div rbx

===================================

this will set rax to 12. however rdx will have an effect to this operation.
if the rdx register is not 0, then the rdx will be concatinated to rax.
this means that rax will be treated as a 128 bit register, and on this the operation will take place. to avoid this... before you use div set rdx to 0.

ALSO, after the div is done, rdx will hold the remainder of the division..




